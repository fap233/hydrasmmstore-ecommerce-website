// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Roles dos usuários
enum Role {
    USER
    ADMIN
    GUEST
  }

// Modelo de Usuário
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String?
  role      Role    @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orders Order[]
}

// Modelo de Serviço
model Service {
    id String @id @default(uuid())
    name String @unique // Ex: "Seguidores Instagram", "Curtidas TikTok"
    description String
    price Decimal @db.Decimal(10, 2) // Preço por unidade ou por pacote base
    category String // Exemplo: Instagram, TikTok, Youtube
    unitCount Int // Quantidade de itens em um pacote (ex: 100, 500, 1000)
    unitType String // Tipo da unidade (ex: seguidores, curtidas, visualizações)
    minPackages Int @default(1)  // Quantidade mínima de pacotes
    maxPackages Int @default(100)  // Quatidade máxima de pacotes
    isActive Boolean @default(true) // Se o serviço está ativo para compra 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    providerServiceId String? // Id do serviço no fornecedor (ex: 1 para "Followers")
    providerRate Decimal? @db.Decimal(10,5) // Custo do fornecedor por unidade (ex: 0.000)

    orderLines OrderLine[] // Um serviço pode ter muitas linhas de pedido
  }

// Modelo de Pedido
model Order {
    id String @id @default(uuid())
    userId String
    user User @relation(fields: [userId], references: [id]) // Relação com o User

    status OrderStatus @default(PENDING) // Status do pedido
    totalAmount Decimal @db.Decimal(10,2) // Valor total do pedido
    orderLines OrderLine[] // Itens do pedido

    // Informações para o provedor externo (SMM Panel)
    providerOrderId String? // Id do pedido no painel do provedor externo
    providerServiceId String? // Id do serviço no painel do provedor externo (se aplicável por pedido)
    providerStatus String? // Status do pedido no painel do provedor externo

    // Integração com MercadoPago
    paymentGateway String? // Ex: MercadoPago, Paypal, Stripe
    paymentId String? // Id da transação na plataforma de pagamento
    paymentStatus String? // Status da transação
    checkoutUrl String? // URL para redirecionar o usuário para o checkout (se utilizar checkout padrão)
    preferenceId String? // Id da preferência criado na plataforma de pagamento (para checkout padrão)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }

  // Modelo de Linha de Pedido
  model OrderLine {
      id String @id @default(uuid())
      orderId String // Id do pedido ao qual pertence
      order Order @relation(fields: [orderId], references: [id])

      serviceId String // Id do serviço comprado
      service Service @relation(fields: [serviceId], references: [id])

      link String // Campo para link/username da mídia (Instagram URL, Youtube URL, etc.)
      quantity Int // Quantidade comprada do serviço 
      unitPrice Decimal @db.Decimal(10,2) // Preço por unidade no momento da compra
      subtotal Decimal @db.Decimal(10,2) // subtotal = quantity * unitPrice
      
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
    }

    // Enum para o status do pedido
    enum OrderStatus {
        PENDING
        PROCESSING
        COMPLETED
        CANCELLED
        REFUNDED
      }
